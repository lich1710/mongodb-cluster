{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\csgray\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11760\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs22 \cf2 \cb3 \CocoaLigature0 I. CREATE THE 3 EC2-INSTANCE IN AWS USING TERRAFORM\
\
Prerequisite: \

\f1\b0  - AWS Credential is setup in the system\
 - terraform is installed 
\f0\b   \

\f1\b0 \
\

\f0\b 1. Create a S3 bucket to store terraform state
\f1\b0 \
\
The S3 bucket is used to store the terraform state so we can easily break \
and run Terraform using different components.\
\

\f0\b - Init terraform:
\f1\b0 \
\
  terraform init terraform/data-storage/s3/\
\

\f0\b - Apply the S3 bucket
\f1\b0 \
  Please provide a unique name. For e.g unique-s3-bucket3 (is available)\
\
  terraform apply terraform/data-storage/s3/\
\
\

\f0\b 2. Create VPC 
\f1\b0 \
\
- Edit file /terraform/vpc/terraform.tf\
  Changed the bucket name to the S3 bucket name above\
\
\

\f0\b Init
\f1\b0 : \
  terraform init terraform/vpc\

\f0\b Apply
\f1\b0 :\
  terraform apply terraform/vpc\
\
\

\f0\b 3. Launch the EC2 instance
\f1\b0 \
\
\pard\pardeftab720\sl280\partightenfactor0

\f2\fs24 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 - Must have permission to do: ec2:DescribeVpcs for Route53 to create private DNS zone\
(Some users with full Admin right might still need to add this ec2 permission)\
\
- edit files /modules/mongo-cluster/vars.tf, changed the bucket (line 6) to correct bucket name\
\
- You can edit the /services/mongoCluster/main.tf for customizing ec2 instance type and ami id\
\
- Launch these ec2 instance:\
\
\pard\pardeftab720\sl280\partightenfactor0
\cf2 \cb3   terraform get 
\f1\fs22 \kerning1\expnd0\expndtw0 \CocoaLigature0 terraform/services/mongoCluster/\

\f2\fs24 \expnd0\expndtw0\kerning0
\CocoaLigature1   terraform init 
\f1\fs22 \kerning1\expnd0\expndtw0 \CocoaLigature0 terraform/services/mongoCluster/\

\f2\fs24 \expnd0\expndtw0\kerning0
\CocoaLigature1   terraform apply 
\f1\fs22 \kerning1\expnd0\expndtw0 \CocoaLigature0 terraform/services/mongoCluster/\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 \cb3 \
- The console will output public IP address of the instances just created. Use the stageKey to access those instance and verify if the config is correct. Else you can use the AWS Management Console to verify\
\
\

\f0\b II. USING ANSIBLE TO DEPLOY MONGODB CLUSTER\
\

\f1\b0 Please update the hostfile of the machine running ansible to include the 3 new instances above:\
\
e.g\
\
52.207.246.29 master\
34.224.74.219 slave1\
54.152.68.12 slave2\
\

\f0\b 1. Update instance public IP address
\f1\b0 \
- Edit the inventory files in /ansible/inventory with public IP of instances above with master is db0 and slave is db1 and db2\
\
- Set ansible host checking = false before start using Ansible (this is to avoid key fingerprint confirmation)\
\
	export ANSIBLE_HOST_KEY_CHECKING=false\
\

\f0\b 2. Install and configure\

\f1\b0 Go to ansible directory
\f0\b \
\
- Install Docker and necessary package to the 3 mongoldb servers
\f1\b0 \
	ansible-playbook -i inventory install.yml\

\f0\b - Setup and run mongodb container on each servers\
	
\f1\b0 ansible-playbook -i inventory setup.yml\
- 
\f0\b Configure and initiate the cluster 
\f1\b0 \
	ansible-playbook -i inventory configure.yml\
\
\
\
}